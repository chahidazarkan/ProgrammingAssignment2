add2 <- function(x, y) {
x+y
}
add2(3, 5)
above <- function(x, n){
use <- x >n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10){
use <- x >n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
pollutantmean <- function(directory, pollutant, id = 1:332) {
MonitorData <- read.csv(directory/id)
polluteantmean(specdata, x, id = 2)
monitordata
getwd()
exit
debug(ls)
getwd
getwd
getw(
getw(
source('~/.active-rstudio-document')
getw(
)
getwd()
setwd(documenten)
setwd(Users/Chahid/Documents/cursussen/datascience/rworkingdirectory)
setwd("~/Documents/cursussen/datascience/rworkingdirectory")
setwd("~/Documents/cursussen/datascience/rworkingdirectory/ProgrammingAssignment2")
load("~/Documents/cursussen/datascience/rworkingdirectory/ProgrammingAssignment2/cachematrix.R")
debug(makeCacheMatrix)
## Because matrix inversion is a costly computation, it is
## useful to cache an inverse matrix rather than computing
## repeatedly. The functions in this file allow for the
## the compution and caching of an inverse matrix in R.
## This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function(solve) i <<- inverse
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated
## (and the matrix has not changed),
## then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- i$getinverse()
if (!is.null(i)) {
message("getting cached data")
return (m)
}
data <- x$get()
i <- inverse(data, ...)
x$getinverse(i)
i
}
debug(makeCacheMatrix)
debug (cacheSolve)
a<-makeCacheMatrix()
a<-makeCacheMatrix()
